@* @page *@
@using RazorPages.Samples.Web
@using RazorPages.Samples.Web.Data
@using RazorPages.Samples.Web.Pages
@inherits Index

@functions {
    public async Task OnGetAsync()
    {
        ExistingCustomers = GetCustomers();
    }

    public async Task<IActionResult> OnPost(int? deleteId)
    {
        if (deleteId.HasValue)
        {
            Logger.LogInformation("Performing delete of customer with ID {customerId}", deleteId.Value);
            DeleteCustomer(deleteId.Value);
            SuccessMessage = $"Customer {deleteId} deleted successfully!";
            return Redirect("/");
        }

        await TryUpdateModelAsync(Customer, "Customer");
        if (ModelState.IsValid)
        {
            AddCustomer(Customer);
            SuccessMessage = $"Customer {Customer.Id} successfully created!";
            return Redirect("/");
        }
        
        // Model errors, populate customer list and show errors
        ExistingCustomers = GetCustomers();
        ErrorMessage = "Please correct the errors and try again";
        return View();
    }

    public IEnumerable<Customer> ExistingCustomers { get; set; }
    public Customer Customer { get; set; } = new Customer();
    public string SuccessMessage
    {
        get { return (string)TempData[nameof(SuccessMessage)]; }
        set { TempData[nameof(SuccessMessage)] = value; }
    }
    public bool ShowSuccessMessage => !string.IsNullOrEmpty(SuccessMessage);
    public string ErrorMessage
    {
        get { return (string)TempData[nameof(ErrorMessage)]; }
        set { TempData[nameof(ErrorMessage)] = value; }
    }
    public bool ShowErrorMessage => !string.IsNullOrEmpty(ErrorMessage);
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "All about interesting people";
}

<div>
    <h1>Customers</h1>
    <form method="post">
        <table class="table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>@Html.DisplayNameFor(_ => Customer.Name)</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in ExistingCustomers)
                {
                <tr>
                    <td>@Html.DisplayFor(_ => customer.Id)</td>
                    <td>@Html.DisplayFor(_ => customer.Name)</td>
                    <td><button type="submit" name="deleteId" value="@customer.Id" class="btn btn-link">Delete</button></td>
                </tr>
                }
                @if (!ExistingCustomers.Any())
                {
                    <tr>
                        <td colspan="3">[no customers found]</td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
</div>

<h2>Create Customer</h2>
@if (ShowSuccessMessage || ShowErrorMessage) {
    <div class="alert alert-@(ShowSuccessMessage ? "success" : "danger") alert-dismissable" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="close"><span aria-hidden="true">&times;</span></button>
        @(ShowSuccessMessage ? SuccessMessage : ErrorMessage)
    </div>    
}
<form method="post" class="form-inline">
    <div class="form-group">
        <label asp-for="Customer.Name"></label>
        <input asp-for="Customer.Name" class="form-control" />
    </div>
    <input type="submit" value="Add Customer" class="btn btn-primary" />
    <div asp-validation-summary="@ValidationSummary.All" class="text-danger"></div>
</form>